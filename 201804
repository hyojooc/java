//배열 합
// 주어진2차원 배열을 다양한 방법으로 제어하고 변환한 뒤 각 원소의 최종합을 구함

//1) 배열 조작 기능

int[][] arr = new int[N][N];

// 각원소의 나머지 연산
for(int r=0; r<N; r++) {    // 행단위로 원소에 접근
    for(int c=0;c<N; c++) { // 열단위로 원소에 접근
        // 나머지 연산
        arr[r][c] = input[r][c] $ 10;
     
    }
}
// 행단위 정렬 : 2차원 배열의 특징을 이용하여
{{}, {}, {}, ..., {}}

for(int r=0; r<N; r++) {
    Arrays.sort(arr[r]);
}

// 열단위 정렬 : 행처럼 하나의 배열로 접근할 수 없기 때문에 각 원소를 새 배열에 넣은 다음 정렬한후 다시 넣는 방법을 사용해야 함
for(int c=0; c<N; c++) {
    int[] tmpArr = new int[N];
    
    for(int r=0; r<N; r++) {
        tmpArr[r] = arr[r][c];
    }
    Arrays.Sort(tmpArr);
    
    for(int r=0; r<N; r++) {
        arr[r][c] = tmpArr[r];
    }
}



//2) 동일인접수 제거 및 최종합 계산 기능
// 동일인접수 변환
int totalSum = 0;
for(int r=0; r<N; r++) {
    for(int c=0; c<N; c++) {
        
        if(위쪽 원소 확인) {
            // 같으면 0으로 설정
        }
        if(아래쪽 원소 확인) {
            // 같으면 0으로 설정
        }
        if(왼쪽 원소 확인) {
            // 같으면 0으로 설정
        }
        if(오른쪽 원소 확인) {
            // 같으면 0으로 설정
        }
        
        : 요구사항에는 인접한 같은 원소는 모두 0으로 설정하라고 나와있지만 순차적으로 인접한 같은 원소들을  0으로 설정하게 되면 
        : 처음부터 0이었던 원소와 같은숫자와 인접하여 0이된 수를 구분할 수 없게되므로 기능이 정상적으로 구현되지 않을 수 있다.
        : 이 요구사항을 조금 다른관점에서 보면 어떤 원소가 0으로 설정되는 것은 결구 배열의 최종합에 포함되지 않는다는 것을 알 수 있다.
        : 따라서 반대로 각 원소마다 주변에 같은수가 없는 경우에만 배열의 최종합에 포함시키면 원소를 변형하지 않고도 기능을 구현할 수 있다.
        : 인접한 원소에 접근할 때는 배열의 범위를 벗어나지 않도록 주의한다.        
        boolaen isSame = false;
        if(r>0 && arr[r][c] == arr[r-1][c]) {
            isSame = true;
        }
        if(r>N && arr[r][c] == arr[r+1][c]) {
            isSame = true;
        }
        if(r>0 && arr[r][c] == arr[r][c-1]) {
            isSame = true;
        }
        if(r>N && arr[r][c] == arr[r][c+1]) {
            isSame = true;
        }
        //주변에 한 원소라도 같은 원소가 있다면 최종합에 포함시키지 않는 기능 구현
        if(!isSame) {
            totalSum += arr[r][c];
        }
    }
}

// 최종합 계산







package com.lgcns.tct.sum;


public class Sum {
	
	
	/**
	 * 배열을 정렬하는 기능
	 *
     * @param		inputData		int[][]		입력데이터(이차원배열)
     * @return						int[][]		정렬된 배열
	 */
	public int[][] getSortedArray(int[][] inputData) {
		int[][] sortedArray = null;
		////////////////////////여기부터 구현 (1) ---------------->
		int arraySize = inputData.length;
		sortedArray = new int[arraySize][arraySize];
		for(int i=0; i<arraySize; i++) {
			for(int j=0; j<arraySize; j++) {
				sortedArray[i][j] = inputData[i][j]%10;
			}
		}
		for(int i=0; i<arraySize; i++){
			for(int j=0; j<arraySize; j++){
				for(int k=j+1; k<arraySize; k++){
					if(sortedArray[i][j] > sortedArray[i][k]) {
						int tmp = sortedArray[i][j];
						sortedArray[i][j] = sortedArray[i][k];
						sortedArray[i][k] = tmp;
					}
				}
			}
		}
		for(int i=0; i<arraySize; i++){
			for(int j=0; j<arraySize; j++){
				for(int k=j+1; k<arraySize; k++){
					if(sortedArray[j][i] > sortedArray[k][i]) {
						int tmp = sortedArray[j][i];
						sortedArray[j][i] = sortedArray[k][i];
						sortedArray[k][i] = tmp;
					}
				}
			}
		}
		
		///////////////////////////// <-------------- 여기까지 구현 (1)
		return sortedArray;
	}
	
	/**
	 * 배열합을 계산하는 기능
	 *
     * @param		sortedArray		int[][]		정렬된 배열
     * @return						int			배열합
	 */
	public int getArrSum(int[][] sortedArray) {
		int arrSum = 0;
		////////////////////////여기부터 구현 (2) ---------------->
		int[] dx = {-1, 0, 1, 0};
		int[] dy = {0, 1, 0, -1};
		int arraySize = sortedArray.length;
		for(int i=0; i<arraySize; i++){
			for(int j=0; j<arraySize; j++){
				if(sortedArray[i][j] != 0) {
					int flag = 0;
					for(int k=0; k<4; k++) {
						int nx = i+dx[k];
						int ny = j+dy[k];
						if(nx<arraySize && nx>=0 && ny<arraySize && ny>=0) {
							if(sortedArray[i][j] == sortedArray[nx][ny]) {
								flag = 1;
								break;
							}
						}
					}
					if(flag == 0){
						arrSum += sortedArray[i][j];
					}
				}
			}
		}
		///////////////////////////// <-------------- 여기까지 구현 (2)
		return arrSum;
	}
	
}
