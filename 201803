//연속수
//주어진 숫자열들이 각 자릿수가 1씩 증가하는지 판단하여 연속수인지 찾고, 찾아낸 연속수를 조합

//3. 연속수
//1) 연속수 검색 기능

for(숫자열목록) {
  for(숫자열탐색) {
    // 연속수 판단
  }
}
for(int i=0; i<list.size(); i++) {
  boolean isSequence = true;
  for(int j=1; j<str.length(); j++) }{
     // 차가 1이 아닌지 비교하는 이유는 for문을 수행하면서 한번이라도 이 조건을 만족시키지 못할 경우 해당 숫자열은 연속수가 아니라는 것이므로
     // break를 수행하여 다음숫자열을 바로 탐색하도록 구현하기 위함
     // 이 때 연속수가 아니어서 break로 for문이 끝났는지 모든 자릿수를 확인하고 for문이 끝났는지 구분하기 위해서는
     // boolean 변수를 사용해주면 좋다.
     // 모든 자릿수를 확인했다는 것은 이 숫자열이 연속수임을 의미하므로 연속수 리스트에 추가해주도록 구현
     
    if(str.charAt(i) - str.charAt(i-1) != 1) {
      // Not sequence
      isSequence = false;
      break;
    }
  }
  
  if(isSequence) {
    sequenceList.add(str);
  }
}
    
// 두번째 소문항에서는 연속수들중 최대값과 최소값을 조합하여 가장 큰수를 사용하라
// 우선 연속수 들 중 최대값과 최소값을 구하기 위해서는 정렬을 수행해야 한다.
// 이때 기존의 리스트는 string 형태로 연속수들을 저장하고 있기 때문에 바로 정렬할 경우 사전식 순서로 정렬하게 됨
// 문제의 예시의 경우 사전식 순서대로 정렬하더라도 마침 크기 순서대로 정렬이 되겠지만 연속수가 다음과 같이 존재한다면 이렇게 정렬이 될 것임
// 14 123 345 78 5678
123
14
345
5678
78

// 따라서 연속수들을 정수형으로 변환해 준뒤에 정렬을 수행하도록 구현함

//2) 연속수 조합 기능

List<Integer> seqNumList;

for(int i=0; i<seqNumList.size(); i++) {
  seqNumList.add(Integer.parseInt(list.get(i)));
}
Collections.sort(seqNumList);

// 정렬을 수행하면 첫번째 원소가 최소값이 되고 마지막 원소가 최대값이 됨
// 이 두 정수를 조합했을 때 더 큰 수를 리턴하도록 구현
// 연속수 정렬
String minStr = Integer.toString(seqNumList.get(0));
String maxStr = Integer.toString(seqNumList.get*seqNumList.size() - 1));

int num1 = Integer.parseInt(minStr + maxStr);
int num2 = Integer.parseInt(maxStr + minStr);

return Math.max(num1, num2);



//조합 넷 크기 비교






package com.lgcns.tct.sequence;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Sequence {
	
	
	/**
	 * 연속수 목록 검색 기능
	 *
     * @param		inputData		List		입력데이터(숫자열 목록)
     * @return						List		연속수 목록
	 */
	public List<String> getSequenceList(List<String> inputData) {
		List<String> sequenceList = null;
		////////////////////////여기부터 구현 (1) ---------------->
		sequenceList = new ArrayList<String>();
		for(String str : inputData){
			char[] strArr = str.toCharArray();
			int tmp = Integer.parseInt(String.valueOf(strArr[0]));
			boolean check = true;
			for(int i = 1; i < strArr.length; i++){
				int intCh = Integer.parseInt(String.valueOf(strArr[i]));
				if(tmp == intCh - 1){
					tmp = intCh;
				}else{
					check = false;
					break;
				}
			}
			if(check){
				sequenceList.add(str);	
			}
		}
		///////////////////////////// <-------------- 여기까지 구현 (1)
		return sequenceList;
	}
	
	/**
	 * 가장 큰 수 생성 기능
	 *
     * @param		sequenceList	List		연속수 목록
     * @return						int			가장 큰 수
	 */
	public int getMaxNum(List<String> sequenceList) {
		int maxNum = 0;
		////////////////////////여기부터 구현 (2) ---------------->
		List<Integer> tmpSequenceList = new ArrayList<Integer>();
		for(String str : sequenceList){
			tmpSequenceList.add(Integer.parseInt(str));
		}
		Collections.sort(tmpSequenceList);
		String minStr = String.valueOf(tmpSequenceList.get(0));
		Collections.reverse(tmpSequenceList);
		String maxStr = String.valueOf(tmpSequenceList.get(0));
		int firstNum = Integer.parseInt(minStr + maxStr);
		int secondNum = Integer.parseInt(maxStr + minStr);
		
		if(firstNum > secondNum){
			maxNum = firstNum;
		}else{
			maxNum = secondNum;
		}
				
		///////////////////////////// <-------------- 여기까지 구현 (2)
		return maxNum;
	}
}
