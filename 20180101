// 주어진 문자열에 섞여있는 알파벳과 숫자를 분리하고 다시 결합
// 1) 알파벳 숫자 구분 기능
for(int i=0; i<str.length(); i++) {
  // 문자 판단
  if('1' <= str.charAt(i) <= '9') {
    // number
    numberString += str.charAt(i);
  } else { // if('A' <= str.charAt(i) <= 'z') 
    // alphabet
    alphaString += str.charAt(i);
  }
}

// 2) 문자열 교차 생성 기능 : 교차시키는 방법은 다양하지만 여기선 완성된 문자열에서 알파벳의 인덱스가 짝수, 숫자의 인덱스가 홀수인 것을 이용하여 구현
for (int i=0; i<11; i++) {
  // 문자 교차
  if(i%2 == 0) { 
    newString += alphaString.charAt(i/2); // index를 2로 나누는 이유는 각 문자열의 길이는 새 문자열의 길이의 반 이므로
  } else {
    newString += numberSTring.charAt(i/);
  }
}

A 3 D 7 C 2 B 5 E 8 F
0 1 2 3 4 5 6 7 8 9 10
A   D   C   B   E   F
0/2 2/2 4/2 6/2 8/2 10/2
3   7   2   5   8
1/2 3/2 5/2 7/2 9/2


public List<String> getStrList(String inputData) {
  List<String> strList = null;
  
  //구현 시작
  strList = new ArrayList<String>();
  
  String alphaString = "";
  String numString = "";
  
  for(int i=0; i<inputData.length(); i++) {
    char c = inputData.charAt(i);
    if(c >= '1' && c <= '9') {
      numString += c;
    } else {    // 'A' <= str.charAt(i) <= 'z' : 문자열의 대소문자는 ascii code study
      alphaString += c;
    }
  }
  
  strList.add(alphaString);
  strList.add(numString);
  
  return strList;
}

public String getNewStr(List<String> strList) {
  String newStr = "";
  
  //구현 시작
  String alphaString = strList.get(0);
  String numString = strList.get(1);
  for(int i=0; i<11; i++) {
    if(i%2 == 0) {
      newStr += alphaString.charAt(i/2);
    } else {
      newStr += numString.charAt(i/2);
    }
  }
  //구현 끝
  return newStr;
}

private static String loadData() {
  String inputData = "F7T123GCZ5Q";
  return inputData;
}

private static void printInput(String inputData) {
}

public class OperationRun {
  public static void main(String[] args) {
    String inputData = loadData();
    printInput(inputData);
    Operation operation = new Operation();
    
    List<String> strList = operation.getStrList(inputData);
    printStrList(strList);
    
    String newStr = operation.getNewStr(strList);
    printNewStr(newStr);
  }
}




package com.lgcns.tct.operation;

import java.util.ArrayList;
import java.util.List;

public class Operation {
	/**
	 * 문자열 분리 기능
	 * 
     * @param		inputData			String		입력데이터(문자열)
     * @return							List		[0]: 문자로 구성된 문자열, [1]: 숫자로 구성된 문자열
	 */
	public List<String> getStrList(String inputData){
		List<String> strList = null;
		//////////////////////여기부터 구현 (1) ---------------->
		strList = new ArrayList<String>();
		String str = "";
		String numStr = "";
		char[] ch = inputData.toCharArray();
		for(char c : ch){
			if(isNum(String.valueOf(c))){
				numStr += c;
			}else{
				str += c;	
			}
		}
		strList.add(str);
		strList.add(numStr);
		///////////////////////////// <-------------- 여기까지 구현 (1)
		return strList;
	}
	
	/**
	 * 새로운 문자열을 생성하는 기능
	 * 
     * @param		strList			List		[0]: 문자로 구성된 문자열, [1]: 숫자로 구성된 문자열
     * @return						String		새로운 문자열
	 */
	public String getNewStr(List<String> strList){
		String newStr = "";
		//////////////////////여기부터 구현 (2) ---------------->
		String str = strList.get(0);
		String numStr = strList.get(1);
		char[] strArr = str.toCharArray();
		char[] numStrArr = numStr.toCharArray();
		for(int i = 0 ; i < strArr.length; i++){
			if(i == strArr.length-1){
				newStr += strArr[i];
			}else{
				newStr += strArr[i]+""+numStrArr[i];	
			}
		}
		///////////////////////////// <-------------- 여기까지 구현 (2)
		return newStr;
	}
	
	/**
	 * 숫자를 확인하는 기능(솔루션용 기능, 제공파일에 없음)
	 *
     * @param		s			String		문자열
     * @return					boolean		숫자여부
	 */
	public boolean isNum(String s) {
		try {
			Double.parseDouble(s);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
    }
}
